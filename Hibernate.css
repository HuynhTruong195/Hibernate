ORM là gì?
ORM (Object-Relational Mapping) là một kỹ thuật lập trình giúp ánh xạ (mapping) giữa các đối tượng trong ngôn ngữ lập trình hướng đối tượng (như Java) với các bảng trong cơ sở dữ liệu quan hệ (RDBMS)
ORM cho phép lập trình viên thao tác với cơ sở dữ liệu thông qua các đối tượng mà không cần viết trực tiếp các câu lệnh SQL

Cách ORM hoạt động
Mỗi class Java tương ứng với một table trong cơ sở dữ liệu
Mỗi instance (đối tượng) tương ứng với một record (hàng dữ liệu)
Các field trong class tương ứng với các column trong bảng
ORM sẽ tự động chuyển đổi dữ liệu giữa Object và dữ liệu trong database (mapping dữ liệu)

Các ORM Framework phổ biến trong Java
Hibernate : 	
Phổ biến nhất, hỗ trợ HQL (Hibernate Query Language), caching mạnh

JPA (Java Persistence API): 
Chuẩn Java cho ORM, thường dùng với Hibernate làm hiện thực

Spring Data JPA: 	
Dựa trên JPA, tích hợp sẵn với Spring Boot

    Ví dụ đơn giản với Hibernate (Annotation-based)

@Entity
@Table(name = "Users")
    public class User {
        @Id
        @GeneratedValue(strategy = GenerationType.IDENTITY)
            private Long id;

        @Column(name ="username")
            private String username;

        @Colum(name = "email")
            private String email;

        //getters, setters

    }

Annotation @Entity xác định đây là Entity class
@Table ánh xạ với bảng users
@Id xác định khóa chính
ORM sẽ tự động ánh xạ các field sang column tương ứng
 

Hibernate là gì?
Hibernate là một framework mã nguồn mở của Java, giúp thực hiện ORM (Object-Relational Mapping)
Hibernate đóng vai trò là tầng trung gian giữa ứng dụng Java và cơ sở dữ liệu, tự động ánh xạ (mapping) giữa các đối tượng Java (POJO) và bảng trong CSDL
Hibernate quản lý CRUD, ánh xạ quan hệ, lazy loading, cache, transaction, query HQL…
 

Ưu điểm của Hibernate
Không cần viết SQL thủ công cho CRUD
Hỗ trợ HQL (Hibernate Query Language) – Ngôn ngữ truy vấn hướng đối tượng
Tự động quản lý cache, lazy loading
Dễ dàng tích hợp với Spring Framework
Hỗ trợ nhiều loại cơ sở dữ liệu thông qua cấu hình
 

Các khái niệm chính trong Hibernate
    SessionFactory: Đối tượng khởi tạo session (kết nối), được tạo 1 lần
    Session: 	Đối tượng làm việc trực tiếp với DB (open/close), giống DAO
    Transaction: Quản lý giao dịch
    Entity: Lớp ánh xạ với bảng trong DB

@Entity
@Table(name = "category")
public class Category implements Serializable { //seriali giúp đồng bộ khi hoạt động trên internet
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int category_id;
    private String category_name;
    private String category_ds;
    private Boolean category_status;

    //getter, setter



public class HibernateUtils {
    private static final SessionFactory sessionFactory = buildSessionFactory();

    private static SessionFactory buildSessionFactory() {
        try {
            Properties prop = new Properties(); //tạo 1 obj chứa thông tin cấ hình hibernate thay file XML
            prop.put(Environment.DIALECT, "org.hibernate.dialect.MySQL8Dialect");
            prop.put(Environment.DRIVER, "com.mysql.cj.jdbc.Driver");
            prop.put(Environment.URL, "jdbc:mysql://localhost:3306/categorymanagement_db");
            prop.put(Environment.USER, "root");
            prop.put(Environment.PASS, "Weak");
            prop.put(Environment.SHOW_SQL, "true");
            prop.put(Environment.HBM2DDL_AUTO, "update");

            // ServiceRegistry là đối tượng trung gian giúp Hibernate tạo SessionFactory từ cấu hình.
            ServiceRegistry registry = new StandardServiceRegistryBuilder()
                    .applySettings(prop)
                    .build();
            //tạo Sessionfactory
            return new Configuration() //khởi tạo
                    .addProperties(prop) //thêm cấu hình vào
                    .addAnnotatedClass(Category.class) //đăng ký entity class Category có @Entity
                    .buildSessionFactory(registry); // tạo SessionFactory
        } catch (Exception e) {
            throw new RuntimeException(e);
        }
    }

    public static SessionFactory getSessionFactory() {
        return sessionFactory;
    }
}




public class HibernateTest {
    public static void main(String[] args) {
        try{
            Session session = HibernateUtils.getSessionFactory().openSession();

         //update
            Category c = session.get(Category.class, 13); // persisten
            c.setCategory_ds("Du lieu cap nhat");
        // bật giao tác để tránh tranh chấp dữ liệu
            Transaction tx = session.beginTransaction();
            session.save(c); // thực hiện lệh cập nhật
            tx.commit();
            
            
           // creat - không cần tạo giao tác vì k có ai tranh chấp dữ liệu
            Category category = new Category();  --transient
            category.setCategory_name("Iphone");
            category.setCategory_ds("Dien Thoai DI Dong Thong Minh");
            category.setCategory_ds("telephone");
            session.save(category);

            session.close();

        }catch(Exception e){
            throw new RuntimeException(e);
        }
    }
}

